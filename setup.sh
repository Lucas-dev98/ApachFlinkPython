#!/usr/bin/env bash
set -euo pipefail

# Minimal setup script for a local Apache Flink distribution (Linux)
# - Downloads a binary distribution into ./flink
# - Prints environment variables to set (optionally appends to ~/.bashrc with --set-env)

FLINK_VERSION="${FLINK_VERSION:-1.18.1}"
FLINK_SCALA="${FLINK_SCALA:-scala_2.12}"
FLINK_TGZ="flink-${FLINK_VERSION}-bin-${FLINK_SCALA}.tgz"
FLINK_URL="https://dlcdn.apache.org/flink/flink-${FLINK_VERSION}/${FLINK_TGZ}"
BACKUP_URL="https://downloads.apache.org/flink/flink-${FLINK_VERSION}/${FLINK_TGZ}"
DEST_DIR="$(pwd)/flink"

usage() {
  cat <<EOF
Usage: $0 [--set-env]

Options:
  --set-env   Append FLINK_HOME and PATH export lines to your ~/.bashrc
  --version   Show default Flink version this script will download
EOF
}

if [[ ${1:-} == "--version" ]]; then
  echo "$FLINK_VERSION"
  exit 0
fi

if ! command -v java >/dev/null 2>&1; then
  echo "ERROR: Java not found. Install OpenJDK 11+ (e.g. sudo apt install openjdk-11-jdk) and re-run."
  exit 1
fi

mkdir -p "$DEST_DIR"

if [[ -d "$DEST_DIR/apache-flink-${FLINK_VERSION}" ]]; then
  echo "Flink ${FLINK_VERSION} already extracted in $DEST_DIR"
else
  echo "Downloading ${FLINK_TGZ}..."
  echo "Tentando URL principal: ${FLINK_URL}"
  
  # Tentar download do mirror principal
  download_success=false
  if command -v wget >/dev/null 2>&1; then
    if wget -c "$FLINK_URL" -O "/tmp/${FLINK_TGZ}" 2>/dev/null; then
      download_success=true
      echo "✓ Download concluído com wget!"
    fi
  elif command -v curl >/dev/null 2>&1; then
    if curl -L "$FLINK_URL" -o "/tmp/${FLINK_TGZ}" 2>/dev/null; then
      download_success=true
      echo "✓ Download concluído com curl!"
    fi
  fi

  # Se falhou, tentar URL de backup
  if [ "$download_success" = false ]; then
    echo "⚠ Falha no mirror principal, tentando backup: ${BACKUP_URL}"
    if command -v wget >/dev/null 2>&1; then
      if wget -c "$BACKUP_URL" -O "/tmp/${FLINK_TGZ}"; then
        download_success=true
        echo "✓ Download concluído com wget (backup)!"
      fi
    elif command -v curl >/dev/null 2>&1; then
      if curl -L "$BACKUP_URL" -o "/tmp/${FLINK_TGZ}"; then
        download_success=true
        echo "✓ Download concluído com curl (backup)!"
      fi
    fi
  fi

  if [ "$download_success" = false ]; then
    echo "✗ ERRO: Não foi possível baixar o Flink"
    echo "Tente baixar manualmente de:"
    echo "  ${FLINK_URL}"
    echo "  ou ${BACKUP_URL}"
    exit 1
  fi

  echo "Extracting to $DEST_DIR ..."
  tar -xzf "/tmp/${FLINK_TGZ}" -C "$DEST_DIR"
  
  # Renomear diretório se necessário (formato pode variar)
  if [[ -d "$DEST_DIR/flink-${FLINK_VERSION}" ]]; then
    mv "$DEST_DIR/flink-${FLINK_VERSION}" "$DEST_DIR/apache-flink-${FLINK_VERSION}"
  fi
  
  echo "Extraction complete."
fi

FLINK_HOME="$DEST_DIR/apache-flink-${FLINK_VERSION}"

PROJECT_ROOT="$(cd "$(dirname "$0")" && pwd)"
ENV_FILE="$PROJECT_ROOT/env.sh"

echo
echo "Flink extracted to: $FLINK_HOME"
echo
echo "Creating environment file: $ENV_FILE"

cat > "$ENV_FILE" <<EOF
# env.sh - environment for this apacheFlink project (generated by setup.sh)
export FLINK_HOME="$FLINK_HOME"
export PATH="\$FLINK_HOME/bin:\$PATH"

# If a python virtualenv exists in the project, add it to PATH so venv python is used
if [[ -d "$PROJECT_ROOT/venv/bin" ]]; then
  export VIRTUAL_ENV="$PROJECT_ROOT/venv"
  export PATH="$PROJECT_ROOT/venv/bin:\$PATH"
fi

# Optionally set JAVA_HOME if sdkman installed and a java is selected
if [[ -n "${SDKMAN_DIR:-}" ]]; then
  # sdkman usually sets JAVA_HOME; keep it if present
  :
fi

EOF

echo
echo "Wrote $ENV_FILE. You can source it with: source $ENV_FILE"

if [[ ${1:-} == "--set-env" ]]; then
  if [[ -w "$HOME/.bashrc" || ! -e "$HOME/.bashrc" ]]; then
    # Ensure we append a single source line (avoid duplicates)
    if ! grep -Fxq "source $ENV_FILE" "$HOME/.bashrc" 2>/dev/null; then
      cat >> "$HOME/.bashrc" <<EOF
# Source environment for apacheFlink project
if [ -f "$ENV_FILE" ]; then
  source "$ENV_FILE"
fi
EOF
      echo "Sourcing of project env appended to $HOME/.bashrc. Reload your shell or run: source ~/.bashrc"
    else
      echo "Project env already sourced in $HOME/.bashrc"
    fi
  else
    echo "Cannot write to $HOME/.bashrc; please source $ENV_FILE manually."
  fi
fi

echo "Setup complete. Start the local cluster with: ./start-flink.sh"
